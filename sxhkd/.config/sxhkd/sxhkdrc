#
# bspwm hotkeys
#

# note a desktop
super + c
    echo "$(bspc query -D -d)" > /tmp/bspwmdtop_swap

# move the windows of the noted desktop to the current desktop
super + v
    for win in $(bspc query -N -d $(cat /tmp/bspwmdtop_swap)); do \
        bspc node $win -d $(bspc query -D -d); \
    done

super + {_,shift + }w
    bspc node -{c,k}

super + s
    bspc query -N -n focused.tiled && state=floating || state=tiled; \
    bspc node -t $state

super + f
    state=fullscreen; \
    bspc query -N -n "focused.$state" && state=$(bspc query -T -n | jq -r '.client.lastState'); \
    bspc node -t "$state"

alt + {_,shift} + Tab
    bspc node -f {next,prev}

super + m
    bspc node -s biggest

super + shift + {h,j,k,l}
    bspc config pointer_follows_focus true; \
    cur_win=$(bspc query -N -n); \
    cur_mon=$(bspc query -M -m); \
    dir={west,south,north,east}; \
    if ! bspc node -f $dir.local; then \
        bspc node -m $dir; \
        bspc monitor -f $dir; \
    else \
        bspc config focus_follows_pointer false; \
        new_mon=$(bspc query -M -m); \
        [ "$new_mon" = "$cur_mon" ] && \
            bspc node -s $cur_win || \
            bspc node $cur_win -m $new_mon; \
        bspc node -f $cur_win; \
    fi; \
    bspc config focus_follows_pointer true; \
    bspc config pointer_follows_focus false

# todo: we only care about focus_follows_pointer if switching monitors.
super + {h,j,k,l}
    bspc config pointer_follows_monitor true; \
    bspc config pointer_follows_focus true; \
    bspc config focus_follows_pointer false; \
    dir={west,south,north,east}; \
    bspc node -f $dir.local || bspc monitor -f $dir; \
    bspc config pointer_follows_monitor false; \
    bspc config pointer_follows_focus false; \
    bspc config focus_follows_pointer true;

super + ctrl + {h,j,k,l}
    bspc node -p {west,south,north,east}

super + ctrl + {_,shift + }space
    bspc node @{_,/} -p cancel

# resize functions
super + alt + {h,j,k,l}
    resize.sh {left,bottom,top,right};

super + ctrl + {1-9}
    bspc node -r 0.{1-9}

# desktop by index on this monitor
super + {1-9}
    D={1-9}; \
    bspc desktop -f "$(bspc query -D -m | sed -n "$D p")";

# Send node to desktop on current monitor index
super + shift + {1-9}
    D={1-9}; \
    bspc node -d "$(bspc query -D -m | sed -n "$D p")"

# insert receptacle, or clear receptacles on current desktop
super + {_,shift} + r
    insert={true,false}; \
    $insert && bspc node -i || \
    for win in `bspc query -N -d -n .leaf.!window`; do bspc node $win -k ; done;

# balance, retrigger focus even after.
super + equal
    bspc query -N -n focused.window && target=@/; \
    bspc node $target -B; \
    bspc node -f

# focus the node for the given path jump
super + {p,b,comma,period}
    bspc node -f @{parent,brother,first,second}

# path jumps by DIR (unsure/need better binding)
super + ctrl + alt + {h,j,k,l}
    bspc node -f @{west,south,north,east}

# kill panel, nicely ask all windows to close, quit.
# todo: ask nicely for real.
super + shift + q
    pgrep lemonbar && ~/.wm/scripts/panelt; \
    for win in $(bspc query -N); do bspc node $win -c ; done; \
    bspc quit

# rotate desktops, or groups of nodes, retrigger focus event after.
super + {_,shift} + semicolon
    bspc query -N -n focused.window && target=@/; \
    bspc node $target -R {90,270}; \
    bspc node -f

# toggle panel or gaps.
super + {_,shift} + slash
    ~/.wm/scripts/{gapt,panelt}

#
# wm independent hotkeys
#

#super + p
#    ~/.wm/scripts/i3blur.sh

super + o
    $BROWSER

super + e
    $FILEBROWSER

super + Return
    $TERMINAL

# launch a program, with a var set for GTK3 programs to launch with the right theme.
super + space
    export GTK_THEME="`cat $HOME/.themes/ACTIVE_THEME 2>/dev/null`"; \
    eval dmenu_run $(dmenu_options)

# A nice wrapper script for password store.
super + shift + space
    eval passmenu $(dmenu_options)

XF86Audio{Prev,Next}
     mpc -q {prev,next}

XF86AudioPlay
     mpc -q toggle

XF86Audio{LowerVolume,RaiseVolume}
    amixer -q sset Master 3%{-,+}

XF86AudioMute
    amixer -q set Master toggle

# make sxhkd reload its configuration files
super + Escape
    pkill -USR1 -x sxhkd
