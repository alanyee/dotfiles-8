#!/usr/bin/env bash
# takes input from `xtitle -s`, makes titles.
# determines monitor from $mon variable (set outside this script)
# todo: handle multiple title block separation better,
# investigate handling that at lemonade level/define delimiter.
# Neeasade


### OPTIONS ###
# Always tabbed visible windows option:
onlyShowActive=${always_tab:-false}
# Maxium window title length
maxWinNameLen=${maxWinNameLen:-25}
# The delimiter to separate window sections
win_delim=${win_delim:-\|}
# The delimiter to separate the window name from the window in a window section.
win_id_delim=${win_id_delim:-//}

# set $1 length to $maxWinNameLen chars (trim or pad)
setLength() {
    content="$(echo "$1" | cut -c 1-$maxWinNameLen)"

    count=$(echo $content | wc -c)
    remain=$(( $maxWinNameLen - $count ))
    [ $(( $remain % 2 )) -ne 0 ] && remain=$(( $remain + 1 ))
    padding=
    for i in $(seq $(( $remain / 2))); do
        padding="$padding "
    done

    echo -n "$padding$content$padding";
}

declare -A titleMap

while read -r trigger; do
    if [[ ! "$mon" = "$(bspc query -M -m)" ]]; then
       continue
    fi

    meta start
    active="$(bspc query -N -m $mon -n .focused.active || echo '')" 

    input="$(bspc query -N -d $mon:focused -n .window || echo '')"
    while read -r wid; do
        [[ -z "$wid" ]] && continue

        # fill in if empty
        [[ -z "${titleMap[$wid]}" ]] && titleMap[$wid]="$(setLength "$(xtitle $wid)")"

        # force refresh on active
        [[ "$wid" = "$active" ]] && titleMap[$wid]="$(setLength "$(xtitle $wid)")"

        # print
        [[ "$wid" = "$active" ]] && meta active
        echo "${titleMap[$wid]}"
        [[ "$wid" = "$active" ]] && meta reset

    done < <(echo "$input")

    # empty desktop case.
    [[ -z "$input" ]] && echo ""
    meta end
done
