#!/usr/bin/env bash
# neeasade's bspwmrc
# may take one arg: gaps or ungapped

set -a

# inline if: iif condition true false
iif() {
    eval $1 && echo -n "${2:-true}" || echo -n "${3:-false}"
}

# if none set, keep whatever is open.
gapped="$1"
[ -z "$gapped" ] && gapped=$(iif "[ ! $(bspc config window_gap) -le 0 ]")

# get settings
PATH=$PATH:$HOME/.wm/scripts

relaunch_panel=$(iif "kill -s TERM $(cat /tmp/panel-pid)")

bspc config border_width {{b_border_width}}
bspc config split_ratio  {{b_split_ratio}}

bspc config normal_border_color   "{{b_normal_border_color}}"
bspc config active_border_color   "{{b_active_border_color}}"
bspc config focused_border_color  "{{b_focused_border_color}}"
bspc config presel_feedback_color "{{b_presel_feedback_color}}"

bspc config focus_follows_pointer     true
bspc config ignore_ewmh_focus         false
bspc config remove_unplugged_monitors true
bspc config remove_disabled_monitors  true

# external rules
bspc config external_rules_command "{{`echo -n $(which external_rules.sh)`}}"

# to gap or not to gap
bspc config window_gap $(iif $gapped {{b_window_gap}} -{{b_border_width}})

side_padding=$(iif $gapped 0 {{b_border_width}})
panel_padding=$(iif $relaunch_panel "{{p_height}}+{{p_gap}}" 0)

bspc config top_padding $(($side_padding + $panel_padding))
for side in right bottom left; do
    bspc config ${side}_padding $side_padding
done

bspc config borderless_monocle $(iif "! $gapped")
bspc config single_monocle     $(iif "! $gapped")

# declare desktops per monitor
# todo: change monitor names/transfer script, or
# separate display from desktop name.
for monitor in $(bspc query -M); do
    bspc monitor $monitor -d 00 01 10 11
done

$relaunch_panel && "{{p_launch_cmd}}" &

# kill off bling - to do: see if we can track this somewhere else/automatically?
# probably do something like stick script in 'effect' dir and pgrep/pkill those.
pgrep -f pulse.sh >/dev/null 2>&1 && pkill -f pulse.sh
pgrep -f 2bspwm >/dev/null 2>&1 && pkill -f 2bspwm

# extensions may be defined in themes here:
{{b_bspwmrc_extend}}

# initial wm startup actions
if [ $(( $(date +%s) - xstart )) -lt 2 ]; then
    $HOME/.wm/startup.sh &
    "{{p_launch_cmd}}" &
fi
