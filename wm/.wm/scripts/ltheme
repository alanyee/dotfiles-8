#!/usr/bin/env bash
# Load a bspwm theme based on argument
# This loads settings for: bspwm, xst, tmux, vim, lemonbar, GTK/Icons, qutebrowser, dunst.
# This makes heavy use of a posix implementation of mustache templates.

targetTheme="$HOME/.wm/themes/${1}.bspwm_theme"
[ -f "$targetTheme" ] || exit 1

set -a

rm $HOME/.bspwm_theme
ln -s "$targetTheme" "$HOME/.bspwm_theme"

. "$HOME/.bspwm_theme"
. "$HOME/.wm/templates/mustache.sh"

# adjust pIcon to theme (rel for panel, acyl, qutebrowser.)
if [ "$p_icon" = "unset" ]; then
    if colort -c "$p_bg_active"; then
        p_icon=$(colort -c "$p_fg_inactive" && colort -l -40 "$p_fg_inactive" || colort -l 40 "$p_fg_inactive")
        [ $? -ne 0 ] && p_icon=$(colort -c "$p_fg_inactive" && colort 50 "$p_fg_inactive" || colort -50 "$p_fg_inactive")
    else
        # light, assume invert
        p_icon=$(colort -c "$p_fg_inactive" && colort -l 60 "$p_fg_inactive" || colort -l -60 "$p_fg_inactive")
        [ $? -ne 0 ] && p_icon=$(colort -c "$p_fg_inactive" && colort -60 "$p_fg_inactive" || colort 60 "$p_fg_inactive")
    fi
fi

# mustache args, cache.
margs() {
    cache=false

    if $cache; then
        cachefile="/tmp/template/$THEME_NAME/$2"
        if [ ! -f "$cachefile" ]; then
            mkdir -p "$(dirname "$cachefile")"
            mustache < "$HOME/.wm/templates/$1" > "$cachefile"
            cp "$cachefile" "$HOME/$2"
            return 1
        fi
        cp "$cachefile" "$HOME/$2"
        return 0
    fi

    mustache < "$HOME/.wm/templates/$1" > "$HOME/$2"
    return 1
}

trimAlphas() {
    for target in active inactive normal; do
        eval p_fg_$target=$(eval colort -t "\$p_fg_$target")
        eval p_bg_$target=$(eval colort -t "\$p_bg_$target")
    done

    p_icon=$(colort -t "$p_icon")
}

# tmux
load_tmux() {
    tmux source-file $HOME/.tmux.conf > /dev/null 2>&1
}

load_bg() {
    eval $BG_COMMAND
}

# also loads term.
load_xresources() {
    trimAlphas

    # qutebrowser related:
    echo $p_font_main | grep -q Bold && p_font_main_bold="bold"
    p_font_main_size="$(echo $p_font_main | grep -Eo '[0-9]+')"
    p_font_main="$(echo $p_font_main | sed 's/-.*//')"
    p_height="$(( ($p_height-10) / 2 ))"

    if ! margs Xresources .Xresources; then
        # handle any color definitions through 255
        for i in `seq 0 255`; do
            eval "[ ! -z \$color$i ] && echo \*.color$i: \#\$color$i >> $HOME/.Xresources"
        done
        [ ! -z "$cachefile" ] && cp "$HOME/.Xresources" "$cachefile"
    fi

    xrdb $HOME/.Xresources

    # tell all xsts to reload their theme:
    pkill -x --signal USR1 st

    # locate a qutebrowser window and send bind to update from Xresources
    if pgrep qutebrowser >/dev/null; then
      wid=$(xdotool search --any --pid "$(pgrep qutebrowser)")
      # only send to one
      wid=$(echo $wid | cut -d ' ' -f 1)
      # pending https://github.com/qutebrowser/qutebrowser/issues/1741
      xdotool windowactivate $wid
      xdotool key --window $wid  "shift+i"
    fi

}

# Keep the current gap setting and reload bspwm
load_bspwm() {
    [ ! -d "$HOME/.wm/panel/juicers" ] && mkdir $HOME/.wm/panel/juicers

    if ! margs juicer .wm/panel/juicers/juicer; then
        # custom reload values:
        p_mail_reload=30
        p_desktop_reload="bspc subscribe"
        p_title_reload="xtitle -s"
        p_weather_reload=600
        p_updates_reload=600
        p_dropdown_reload="echo oneshot"
        p_themeSwitch_reload="echo oneshot"
        p_dynamicmpd_reload=0

        # note all lemons, generate them.
        lemons=$(echo $p_format | tr ':|' ' ');
        IFS=' '
        for lemon in $lemons; do
            colorchange.sh "$lemon" "$(eval "echo \${p_${lemon}_reload}")" >> $HOME/.wm/panel/juicers/juicer
            echo "" >> $HOME/.wm/panel/juicers/juicer
        done
        IFS=
        [ ! -z "$cachefile" ] && cp "$HOME/.wm/panel/juicers/juicer" "$cachefile"
    fi

    [ $(bspc config window_gap) -le 0 ] && export BSPWM_GAPS=false || export BSPWM_GAPS=true
    "$HOME/.wm/bspwmrc"
}

# vim reload
load_vim() {
    VIMS=`vim --serverlist`
    for vim in $VIMS; do
        vim --servername $vim --remote-send '<Esc>:so $MYVIMRC<CR>' &
    done
}

# GTK (make theme if it does not exist, then reload)
load_gtk() {
    trimAlphas
    margs gtkrc .gtkrc-2.0

    if [ ! -d "$HOME/.themes/$THEME_NAME" ]; then
        target="$(mktemp)"
        mustache < $HOME/.wm/templates/oomox > $target
        oomox-cli -o "$THEME_NAME" "$target"
    fi

    # icon color(ACYL)
    $HOME/.icons/acyl/icon.sh "#$p_icon"

    # reload
    gtkrc-reload &

    # set a place to reference active theme for newly launched GTK3 programs.
    echo "$THEME_NAME" > $HOME/.themes/ACTIVE_THEME
}

# qutebrowser
load_qutebrowser() {
    trimAlphas

    echo $p_font_main | grep -q Bold && p_font_main_bold="bold"
    p_font_main_size="$(echo $p_font_main | grep -Eo '[0-9]+')"
    p_font_main="$(echo $p_font_main | sed 's/-.*//')"
    p_height="$(( ($p_height-10) / 2 ))"

    margs qutebrowser .config/qutebrowser/qutebrowser.conf
}

# dunst
load_dunst() {
    trimAlphas
    [ $b_border_width -gt 4 ] && b_border_width=$(( $b_border_width/2 ))
    pkill -x dunst

    margs dunstrc .config/dunst/dunstrc

    # dunst needs delay(?)
    sleep 2
    dunst
}

shift
if [ -z "$1" ]; then
    targets="tmux xresources bspwm bg vim gtk dunst qutebrowser"
else
    targets="$*"
fi

IFS=" "
for conf in $targets; do
    load_$conf &
done
