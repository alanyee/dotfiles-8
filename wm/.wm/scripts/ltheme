#!/usr/bin/env bash
# Load themes for programs
# Check 'targets' variable at end for all posibilities.

targetTheme="$HOME/.wm/themes/${1}.bspwm_theme"
[ -f "$targetTheme" ] || exit 1

set -a

rm $HOME/.bspwm_theme
ln -s "$targetTheme" "$HOME/.bspwm_theme"

. "$HOME/.bspwm_theme"
. "$HOME/.wm/templates/mustache.sh"

# adjust pIcon to theme (rel for panel, acyl, qutebrowser.)
if [ "$p_icon" = "unset" ]; then
    colort -c "$p_bg_active" && intensity=40 || intensity=60
    p_icon=$(colort -c "$p_fg_inactive" && colort -l intensity "$p_fg_inactive" || colort -l -intensity "$p_fg_inactive")
    [ $? -ne 0 ] && p_icon=$(colort -c "$p_fg_inactive" && colort -intensity "$p_fg_inactive" || colort intensity "$p_fg_inactive")
fi

# mustache args, cache.
# usage: margs <template name> <destination>
# <destination> is relative to $HOME
margs() {
    cache=false
    target="$HOME/$2"
    mkdir -p "${target%/*}"

    if $cache; then
        cachefile="/tmp/template/$THEME_NAME/$2"
        if [ ! -f "$cachefile" ]; then
            mkdir -p "$(dirname "$cachefile")"
            mustache < "$HOME/.wm/templates/$1" > "$cachefile"
            cp "$cachefile" "$target"
            return 1
        fi
        cp "$cachefile" "$target"
        return 0
    fi

    mustache < "$HOME/.wm/templates/$1" > "$target"
    return 1
}

trimAlphas() {
    for target in active inactive normal; do
        eval p_fg_$target=$(eval colort -t "\$p_fg_$target")
        eval p_bg_$target=$(eval colort -t "\$p_bg_$target")
    done

    p_icon=$(colort -t "$p_icon")
}

load_tmux() {
    margs tmux .tmux.conf
    tmux source-file "$HOME/.tmux.conf"
}

load_weechat() {
    # weechat opens a fifo in this location that is on/enabled by default.
    wee_cmd() {
        echo "*$*" > "$HOME/.weechat/weechat_fifo"
    }

    margs weechat .weechat/weechat.conf

    # check for buffers.pl, assume we need to install plugins if it's not present.
    [ ! -f "$HOME/.weechat/perl/buffers.pl" ] && \
        wee_cmd '/script install autoconnect.py buffers.pl highmon.pl autosort.py notify.py'

    wee_cmd '/reload'

    # buffers.pl dies on reload
    wee_cmd '/perl unload'
    wee_cmd '/perl autoload'
}

load_compton() {
    pkill compton
    margs compton .config/compton.conf
    compton
}

load_bg() {
    eval $BG_COMMAND
}

# also loads xst, qutebrowser
load_xresources() {
    trimAlphas

    # qutebrowser + emacs related:
    echo $p_font_main | grep -q Bold && p_font_main_bold="bold"
    p_font_main_size="$(echo $p_font_main | grep -Eo '[0-9]+')"
    p_font_main="$(echo $p_font_main | sed 's/-.*//')"
    p_font_main_dize="$(echo $p_font_main | sed 's/-.*//')"
    p_height="$(( ($p_height-10) / 2 ))"

    st_font_size="$(echo $st_font | sed 's/.*-//')"
    st_font="$(echo $st_font | sed 's/-.*//')"

    if ! margs Xresources .Xresources; then
        # handle any color definitions through 255
        for i in `seq 0 255`; do
            eval "[ ! -z \$color$i ] && echo \*.color$i: \#\$color$i >> $HOME/.Xresources"
        done
        [ ! -z "$cachefile" ] && cp "$HOME/.Xresources" "$cachefile"
    fi

    xrdb $HOME/.Xresources

    # tell all xsts to reload their theme:
    pkill -x --signal USR1 st

    # locate a qutebrowser window and send bind to update from Xresources
    # do so by the keybindings associated, then switch back.
    if pgrep qutebrowser >/dev/null; then
      curren_wid=`bspc query -N -n `
      wid=$(xdotool search --any --pid "$(pgrep qutebrowser)")
      # only send to one
      wid=$(echo $wid | cut -d ' ' -f 1)
      # pending https://github.com/qutebrowser/qutebrowser/issues/1741
      xdotool windowactivate $wid xdotool key --window $wid  "shift+q"
      bspc node -f $current_wid
    fi

}

# Keep the current gap setting and reload bspwm
load_bspwm() {
    if ! margs juicer .wm/panel/juicers/juicer; then
        # note all lemons, generate them.
        lemons=$(echo $p_format | tr ':|' ' ');
        IFS=' '
        for lemon in $lemons; do
            colorchange.sh "$lemon" >> $HOME/.wm/panel/juicers/juicer
            echo "" >> $HOME/.wm/panel/juicers/juicer
        done
        IFS=
        [ ! -z "$cachefile" ] && cp "$HOME/.wm/panel/juicers/juicer" "$cachefile"
    fi

    [ $(bspc config window_gap) -le 0 ] && BSPWM_GAPS=false || BSPWM_GAPS=true
    "$HOME/.wm/bspwmrc"
}

# vim reload
load_vim() {
    VIMS=`vim --serverlist`
    for vim in $VIMS; do
        vim --servername $vim --remote-send '<Esc>:so $MYVIMRC<CR>' &
    done
}

load_emacs() {
    # todo: incorporate size
    emacs_font="$(echo $st_font | sed 's/-.*//')"
    emacs_font="\"${emacs_font}\""

    emacsclient --eval "(load-theme '${emacs_theme})"
    emacsclient --no-wait --eval "(mapc (lambda (face) (set-face-attribute face nil :weight 'normal :family '${emacs_font})) (face-list))"

    # overrides (success seems to vary with font)
    emacsclient --no-wait --eval "(set-face-bold-p 'bold nil)"
    emacsclient --no-wait --eval "(set-face-background 'font-lock-comment-face nil)"
    emacsclient --no-wait --eval "(set-face-attribute 'font-lock-comment-face nil :weight 'normal :family '${emacs_font})"
}

# GTK (make theme if it does not exist, then reload)
load_gtk() {
    trimAlphas

    margs gtkrc .gtkrc-2.0

    if [ ! -d "$HOME/.themes/$THEME_NAME" ]; then
        target="$(mktemp)"
        mustache < $HOME/.wm/templates/oomox > $target
        oomox-cli -o "$THEME_NAME" "$target"
    fi

    # icon color(ACYL)
    $HOME/.icons/acyl/icon.sh "#$p_icon"

    # reload
    gtkrc-reload &

    # set a place to reference active theme for newly launched GTK3 programs.
    echo "$THEME_NAME" > $HOME/.themes/ACTIVE_THEME
}

# qutebrowser
load_qutebrowser() {
    trimAlphas

    echo $p_font_main | grep -q Bold && p_font_main_bold="bold"
    p_font_main_size="$(echo $p_font_main | grep -Eo '[0-9]+')"
    p_font_main="$(echo $p_font_main | sed 's/-.*//')"
    p_height="$(( ($p_height-10) / 2 ))"

    margs qutebrowser .config/qutebrowser/qutebrowser.conf
}

# dunst
load_dunst() {
    trimAlphas

    [ $b_border_width -gt 4 ] && b_border_width=$(( $b_border_width/2 ))
    pkill -x dunst

    margs dunstrc .config/dunst/dunstrc

    # dunst needs delay(?)
    sleep 2
    dunst
}

shift

targets="${*:-emacs compton tmux xresources bspwm bg vim gtk dunst qutebrowser weechat}"

IFS=" "
for conf in $targets; do
    load_$conf &
done
IFS=
