#!/usr/bin/env bash
# Load themes for programs
# Check 'targets' variable at end for all posibilities.

targetTheme="$HOME/.wm/themes/${1}"

# relative:
cd $(dirname $([ -L $0  ] && readlink -f $0 || echo $0))
PATH="$PATH:."

set -a

rm $HOME/.bspwm_theme
ln -s "$targetTheme" "$HOME/.bspwm_theme"
eval "$(theme get)"

# inline if: iif condition true false
iif() {
    eval $1 && echo -n "${2-true}" || echo -n "${3-false}"
}

. "./mustache.sh"

# adjust pIcon to theme (rel for panel, acyl, qutebrowser.)
if [ "$p_icon" = "unset" ]; then
    colort -c "$p_bg_active" && intensity=40 || intensity=60
    p_icon=$(colort -c "$p_fg_inactive" && colort -l intensity "$p_fg_inactive" || colort -l -intensity "$p_fg_inactive")
    [ $? -ne 0 ] && p_icon=$(colort -c "$p_fg_inactive" && colort -intensity "$p_fg_inactive" || colort intensity "$p_fg_inactive")
fi

# mustache args, cache.
# usage: margs <template name> <destination>
# <destination> is relative to $HOME
margs() {
    cache=false
    target="$HOME/$2"
    mkdir -p "${target%/*}"

    if $cache; then
        cachefile="/tmp/template/$THEME_NAME/$2"
        if [ ! -f "$cachefile" ]; then
            mkdir -p "${cachefile%/*}"
            mustache < "$HOME/.wm/templates/$1" > "$cachefile"
            cp "$cachefile" "$target"
            return 1
        fi
        cp "$cachefile" "$target"
        return 0
    fi

    mustache < "$HOME/.wm/templates/$1" > "$target"
    return 1
}

trimAlphas() {
    for target in active inactive normal; do
        eval p_fg_$target=$(eval colort -t "\$p_fg_$target")
        eval p_bg_$target=$(eval colort -t "\$p_bg_$target")
    done

    p_icon=$(colort -t "$p_icon")
}

load_tmux() {
    margs tmux .tmux.conf
    pgrep tmux && tmux source-file "$HOME/.tmux.conf"
}

load_weechat() {
    # weechat opens a fifo in this location that is on/enabled by default.
    wee_cmd() {
        echo "*$*" > "$HOME/.weechat/weechat_fifo"
        sleep 0.5
    }

    margs weechat .weechat/weechat.conf

    # check for buffers.pl, assume we need to install plugins if it's not present.
    [ ! -f "$HOME/.weechat/perl/buffers.pl" ] && \
        wee_cmd '/script install autoconnect.py buffers.pl highmon.pl autosort.py notify.py'

    wee_cmd '/reload'

    # buffers.pl dies on reload
    wee_cmd '/perl unload buffers'

    wee_cmd '/perl load buffers.pl'
}

load_compton() {
    pkill compton
    margs compton .config/compton.conf
    compton &
}

load_bg() {
    eval $BG_COMMAND
}

# also loads xst, qutebrowser
load_xresources() {
    trimAlphas

    # qutebrowser + emacs related:
    echo $p_font_main | grep -q Bold && p_font_main_bold="bold "
    p_font_main_size="$(echo $p_font_main | grep -Eo '[0-9]+')"
    p_font_main_size="${p_font_main_bold}$(echo $p_font_main | grep -Eo '[0-9]+')"

    p_font_main="$(echo $p_font_main | sed 's/-.*//')"
    p_height="$(( ($p_height-10) / 2 ))"

    st_font_size="$(echo $st_font | sed 's/.*-//')"
    st_font="$(echo $st_font | sed 's/-.*//')"

    if ! margs Xresources .Xresources; then
        # handle any color definitions through 255
        for i in `seq 0 255`; do
            eval "[ ! -z \$color$i ] && echo \*.color$i: \#\$color$i >> $HOME/.Xresources"
        done
        [ ! -z "$cachefile" ] && cp "$HOME/.Xresources" "$cachefile"
    fi

    xrdb $HOME/.Xresources

    # tell all xsts to reload their theme:
    pkill -x --signal USR1 st

    # locate a qutebrowser window and send bind to update from Xresources
    # do so by the keybindings associated, then switch back.
    if pgrep -f qutebrowser >/dev/null; then
        current_wid=`bspc query -N -n`
        # only send to one
        wid="$(xdotool search --class qutebrowser | head -n 1)"

        # pending https://github.com/qutebrowser/qutebrowser/issues/1741
        xdotool windowactivate $wid
        xdotool key --window $wid "shift+i"
        bspc node -f $current_wid
    fi
}

# bspwm, panel
load_bspwm() {
    if [ "${p_launch_cmd##*/}" = "lemonade" ]; then
        rm $HOME/.wm/panel/juicers/*

        p_format_1="$p_format"
        juice_index=0
        IFS=$'\n'
        for mon in $(bspc query -M); do
            juice_index=$((juice_index+1))

            (
            conf="$(eval echo "\${p_format_${juice_index}}")"
            [ -z "$conf" ] && conf="$p_format"
            p_format="$conf"

            juicer_target=".wm/panel/juicers/juicer$juice_index"

            if ! margs juicer "$juicer_target"; then
                # note all lemons, generate them.
                lemons=$(echo $p_format | tr ':|' ' ');

                . ripen
                IFS=' '
                parallel -P 0 "squeeze {}" ::: $lemons >> $HOME/$juicer_target
                IFS=

                [ ! -z "$cachefile" ] && cp "$HOME/$juicer_target" "$cachefile"
            fi
            ) &
        done
    fi

    bspwmrc=".config/bspwm/bspwmrc"
    panelt=".wm/scripts/interact/panelt"
    margs bspwm "$bspwmrc"
    margs panelt "$panelt"
    chmod +x "$HOME/$bspwmrc" "$HOME/$panelt"

    wait
    "$HOME/$bspwmrc"
}

# vim reload
load_vim() {
    # defunct.
    return

    #VIMS=`vim --serverlist`
    #for vim in $VIMS; do
    #vim --servername $vim --remote-send '<Esc>:so $MYVIMRC<CR>' &
    #done
}

load_emacs() {
    mx_eval() {
        emacsclient --eval "($*)"
    }

    mx_eval "load-theme '${emacs_theme}"

    # conform spaceline and helm prompts to colorscheme
    mx_eval "custom-set-faces '(spacemacs-normal-face ((t (:inherit 'mode-line))))"
    mx_eval "spaceline-compile"
    mx_eval "set-face-attribute 'fringe nil :background nil"

    # match term padding
    mx_eval "set-frame-parameter (selected-frame) 'internal-border-width ${st_borderpx}"

    # set font on current and future.
    mx_eval "set-face-attribute 'default nil :font \"${st_font}\" "
    mx_eval "set-frame-font \"${st_font}\" nil t"

    # remove commend background from themes that set that.
    mx_eval "set-face-background 'font-lock-comment-face nil"

    # no bold:
    mx_eval "mapc (lambda (face) (set-face-attribute face nil :weight 'normal :underline nil :inherit nil :slant 'normal)) (face-list)"
    mx_eval "set-face-bold-p 'bold nil"
}

# GTK (make theme if it does not exist, then reload)
load_gtk() {
    trimAlphas

    margs gtkrc .gtkrc-2.0

    if [ ! -d "$HOME/.themes/$THEME_NAME" ]; then
        target="$(mktemp)"
        mustache < $HOME/.wm/templates/oomox > $target
        oomox-cli -o "$THEME_NAME" "$target"
    fi

    # icon color(ACYL)
    $HOME/.icons/acyl/icon.sh "#$p_icon"

    # reload
    gtkrc-reload &

    # set a place to reference active theme for newly launched GTK3 programs.
    echo "$THEME_NAME" > $HOME/.themes/ACTIVE_THEME
}

# qutebrowser
load_qutebrowser() {
    trimAlphas

    echo $p_font_main | grep -q Bold && p_font_main_bold="bold "
    p_font_main_size="${p_font_main_bold}$(echo $p_font_main | grep -Eo '[0-9]+')"
    p_font_main="$(echo $p_font_main | sed 's/-.*//')"
    p_height="$(( ($p_height-10) / 2 ))"

    margs qutebrowser .config/qutebrowser/qutebrowser.conf
}

# dunst
load_dunst() {
    trimAlphas

    [ $b_border_width -gt 4 ] && b_border_width=$(( $b_border_width/2 ))
    margs dunstrc .config/dunst/dunstrc

    pkill -x dunst
    sleep 2 # dunst needs delay(?)
    dunst &
}

shift

targets="${*:-emacs compton tmux xresources bspwm bg vim gtk dunst qutebrowser weechat}"

IFS=" "
for conf in $targets; do
    #time="$((time load_$conf) 2>&1 1>/dev/null | tail -n 3 | head -n 1)"
    #echo $conf : $time >> theme_perf.txt
    load_$conf &
done
IFS=

disown
